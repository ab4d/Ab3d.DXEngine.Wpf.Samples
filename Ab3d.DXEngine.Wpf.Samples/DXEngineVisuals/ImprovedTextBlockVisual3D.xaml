<Page x:Class="Ab3d.DXEngine.Wpf.Samples.DXEngineVisuals.ImprovedTextBlockVisual3D"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:controls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="1000"
      Title="RenderQualityComparison">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>


        <!-- WPF part -->

        <Border Name="WpfViewportBorder" Grid.Column="0" Margin="0 0 5 0" BorderBrush="Gray" BorderThickness="2" >
            <Border.Background>
                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                    <GradientStop Offset="0" Color="#033C62"/>
                    <GradientStop Offset="1" Color="#01131F"/>
                </LinearGradientBrush>
            </Border.Background>
            <Viewport3D Name="WpfViewport3D">

            </Viewport3D>
        </Border>
        <cameras:TargetPositionCamera Name="WpfCamera" Grid.Column="0"
                                      TargetPosition="0 0 0"
                                      Heading="-15" Attitude="-15" Bank="0" Distance="350"
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=WpfViewport3D}"
                                      CameraChanged="WpfCamera_OnCameraChanged"/>

        <controls:MouseCameraController Name="WpfMouseCameraController" Grid.Column="0"
                                        RotateCameraConditions="LeftMouseButtonPressed"
                                        MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                        EventsSourceElement="{Binding ElementName=WpfViewportBorder}"
                                        TargetCamera="{Binding ElementName=WpfCamera}"/>

        <StackPanel Grid.Column="0" Margin="10 5 10 0" HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
            <TextBlock Text="WPF 3D rendering" FontSize="20" Foreground="Silver" FontWeight="Bold" />
            <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="Silver" Margin="0 3 0 0">
                <Run>When TextBlockVisual3D is rendered by WPF 3D, then the following two problems may appear:</Run>
                <LineBreak />
                <Run>1) Because TextBlockVisual3D uses transparent parts, the objects must be sorted by camera distance so that objects farther away are rendered first.</Run>
                <LineBreak />
                <Run>2) When using light text colors, the color can become dark when the TextBlockVisual3D is not facing the light. This may be improved slightly by adding ambient light.</Run>
            </TextBlock>
        </StackPanel>

        <StackPanel Grid.Column="0" Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="10">
            <Button Name="WpfSortByCameraDistanceButton" Content="Order by camera distance" Click="WpfSortByCameraDistanceButton_OnClick" />
        </StackPanel>
        
        

        <!-- DXEngine part -->

        <Border Name="DXViewportBorder" Grid.Column="1" Margin="5 0 0 0" BorderBrush="Gray" BorderThickness="2" >
            <Border.Background>
                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                    <GradientStop Offset="0" Color="#033C62"/>
                    <GradientStop Offset="1" Color="#01131F"/>
                </LinearGradientBrush>
            </Border.Background>
            <dxControls:DXViewportView Name="MainDXViewportView" PresentationType="DirectXImage" BackgroundColor="Transparent">
                <Viewport3D Name="DXViewport3D">
                </Viewport3D>
            </dxControls:DXViewportView>

        </Border>
        <cameras:TargetPositionCamera Name="DXCamera" Grid.Column="1"
                                      TargetPosition="0 0 0"
                                      Heading="-15" Attitude="-15" Bank="0" Distance="350"
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=DXViewport3D}"
                                      CameraChanged="DXCamera_OnCameraChanged"/>

        <controls:MouseCameraController Name="DXMouseCameraController" Grid.Column="1"
                                        RotateCameraConditions="LeftMouseButtonPressed"
                                        MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                        EventsSourceElement="{Binding ElementName=DXViewportBorder}"
                                        TargetCamera="{Binding ElementName=DXCamera}"/>

        <StackPanel Grid.Column="1" Margin="15 5 10 0" HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
            <TextBlock Text="Ab3d.DXEngine rendering" FontSize="20" Foreground="Silver" FontWeight="Bold" />
            <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="Silver" Margin="0 3 0 0" >
                <Run>When TextBlockVisual3D is rendered by Ab3d.DXEngine, it is possible to solve the previous two problems:</Run>
                <LineBreak />
                <Run>1) With Ab3d.DXEngine it is possible to use alpha-clipping to discard the transparent pixels. This way the objects can be rendered in any order. This can be enabled by setting the Texture_AlphaClipThreshold DXAttribute (see code behind). It would be also possible to enable Ab3d.DXEngine's transparency sorting that is much faster than manual ordering of objects.</Run>
                <LineBreak />
                <Run>2) It is possible to render TextBlockVisual3D with using SolidColorEffect. This way the lighting calculations are not used for rendering and the text is always rendered with the same color. This can be enabled by setting the UseSolidColorEffect DXAttribute to true (see code behind).</Run>
            </TextBlock>
        </StackPanel>

        <StackPanel Grid.Column="1" Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="10">
            <CheckBox Name="AlphaClipCheckBox" Content="Set AlphaClipThreshold" IsChecked="True" FontWeight="Bold" Foreground="Silver" 
                      Checked="OnDXEngineSettingsCheckedChanged" Unchecked="OnDXEngineSettingsCheckedChanged" />

            <CheckBox Name="UseSolidColorEffectCheckBox" Content="Use SolidColorEffect" IsChecked="True" FontWeight="Bold" Foreground="Silver" Margin="0 3 0 0" 
                      Checked="OnDXEngineSettingsCheckedChanged" Unchecked="OnDXEngineSettingsCheckedChanged" />
            
            <CheckBox Name="DXEngineSortByCameraDistanceEffectCheckBox" Content="Sorting by camera distance" IsChecked="False" FontWeight="Bold" Foreground="Silver" Margin="0 3 0 0" 
                      Checked="OnDXEngineSettingsCheckedChanged" Unchecked="OnDXEngineSettingsCheckedChanged" />
        </StackPanel>

    </Grid>
</Page>
