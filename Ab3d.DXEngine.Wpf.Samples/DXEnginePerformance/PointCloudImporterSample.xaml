<Page x:Class="Ab3d.DXEngine.Wpf.Samples.DXEnginePerformance.PointCloudImporterSample"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:ab3d="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
      xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"   
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      Title="InstancedMeshGeometry3DTest"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Margin="5 0 5 4" TextWrapping="Wrap">
            <Run Foreground="#333" FontWeight="Bold" FontSize="18">Point-cloud importer and exporter</Run>
            <LineBreak/>
            <Run FontSize="16" Foreground="#444">Drag and drop a file to show the positions in the file as a point-cloud</Run>
        </TextBlock>

        <Rectangle Grid.Row="0" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="2" Fill="#333333" SnapsToDevicePixels="True" />

        <!-- This sample is using PresentationType set to DirectXOverlay. 
             This can greatly improve performance of rendering because graphic card can render in the background. 
             With DirectXImage, the CPU needs to wait until graphics card finishes rendering and then can send the rendered image to the WPF composition engine. 
             A drawback of DirectXOverlay is that no WPF object can be drawn over 3D scene. -->
        <dxControls:DXViewportView Name="MainDXViewportView" Grid.Row="1" PresentationType="DirectXOverlay" BackgroundColor="White">
            <Viewport3D Name="MainViewport">
            </Viewport3D>
        </dxControls:DXViewportView>

        <cameras:TargetPositionCamera Name="Camera1" Grid.Row="1"
                                      Heading="30" Attitude="-20" Bank="0" Distance="500" 
                                      TargetPosition="0 0 0"
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=MainViewport}"/>

        <!-- EventsSourceElement is set to MainDXViewportView - this means that the MainDXViewportView's mouse events are subscribed to - this enables camera rotation without the need to be over the rendered 3D element -->
        <ab3d:MouseCameraController Name="MouseCameraController1" Grid.Row="1"
                                    RotateCameraConditions="LeftMouseButtonPressed"
                                    MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                    EventsSourceElement="{Binding ElementName=MainDXViewportView}"
                                    TargetCamera="{Binding ElementName=Camera1}"/>

        <Rectangle Grid.Row="2" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="2" Fill="#333333" SnapsToDevicePixels="True" />
        <WrapPanel Grid.Row="2" Margin="0 7 10 5" Orientation="Horizontal">
            <TextBlock Text="Pixel size:" FontWeight="Bold" VerticalAlignment="Center" Margin="0 0 3 0"/>
            <Slider Name="PixelSizeSlider" Minimum="10" Maximum="100" Value="40" Width="100" ValueChanged="PixelSizeSlider_OnValueChanged" />
            <TextBlock Name="PixelSizeTextBlock" Text="" Width="50" FontWeight="Bold" VerticalAlignment="Center" Margin="3 0 0 0"/>

            <CheckBox Name="IsWorldSizeCheckBox" Content="IsWorldSize" IsChecked="False" FontWeight="Bold" Margin="0 0 15 0" VerticalAlignment="Center" Checked="OnIsWorldSizeCheckedChanged" Unchecked="OnIsWorldSizeCheckedChanged" 
                      ToolTip="When checked then the pixel size is specified in 3D world coordinates&#x0a;(when using perspective camera, the size of the pixel is smaller when it is farther away from the camera).&#x0a;When unchecked, then the size is defined in screen coordinates.&#x0a;(the size of the pixel is the same regardless of the distance from the camera)"/>

            <CheckBox Name="IsCircularPixelCheckBox" Content="IsCircularPixel" IsChecked="True" FontWeight="Bold" Margin="0 0 10 0" VerticalAlignment="Center" Checked="OnIsCircularPixelCheckedChanged" Unchecked="OnIsCircularPixelCheckedChanged" />

            <CheckBox Name="ZUpAxisCheckBox" Content="Is Z axis up" IsChecked="True" FontWeight="Bold" Margin="0 0 10 0" VerticalAlignment="Center" Checked="OnZUpAxisCheckBoxCheckedChanged" Unchecked="OnZUpAxisCheckBoxCheckedChanged"
                      ToolTip="When checked, then Y and Z coordinates are swapped when reading the data because DXEngine uses Y up axis."/>

            <Button Name="CropButton" Content="Crop" Padding="8 1" Margin="20 0 0 0" Click="CropButton_OnClick" />
            <Button Name="ExportButton" Content="Export" Padding="8 1" Margin="10 0 0 0" Visibility="Collapsed" Click="ExportButton_OnClick" />
        </WrapPanel>

        <TextBlock Name="PixelsCountTextBlock" Grid.Row="2" Text="Pixels count: 00000" FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Right"/>
    </Grid>
</Page>
