<Page x:Class="Ab3d.DXEngine.Wpf.Samples.DXEnginePerformance.InstancedTextNodeSample"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:ab3d="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
      xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      xmlns:controls="clr-namespace:Ab3d.DXEngine.Wpf.Samples.Controls"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="1100"
      Title="MultiThreadingSample">

    <Grid Name="RootGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Border Name="ViewportBorder" Grid.Row="0" Background="Transparent">

            <!-- This sample is using PresentationType set to DirectXOverlay. 
                 This can greatly improve performance of rendering instancing because graphic card can render in the background. 
                 With DirectXImage, the CPU needs to wait until graphics card finishes rendering and then can send the rendered image to the WPF composition engine. 
                 A drawback of DirectXOverlay is that no WPF object can be drawn over 3D scene. -->
            <dxControls:DXViewportView Name="MainDXViewportView" PresentationType="DirectXImage" BackgroundColor="White">
                <Viewport3D Name="MainViewport">
                </Viewport3D>
            </dxControls:DXViewportView>

        </Border>

        <cameras:TargetPositionCamera Name="Camera1" Grid.Row="0"
                                      TargetPosition="0 0 0"
                                      Heading="30" Attitude="-20" Bank="0"
                                      Distance="600" 
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=MainViewport}"/>

        <!-- EventsSourceElement is set to MainDXViewportView - this means that the MainDXViewportView's mouse events are subscribed to - this enables camera rotation without the need to be over the rendered 3D element -->
        <ab3d:MouseCameraController Name="MouseCameraController1" Grid.Row="0"
                                    ZoomMode="MousePosition"
                                    RotateAroundMousePosition="True"
                                    RotateCameraConditions="LeftMouseButtonPressed"
                                    MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                    EventsSourceElement="{Binding ElementName=MainDXViewportView}"
                                    TargetCamera="{Binding ElementName=Camera1}"/>

        <Border Grid.Row="0" BorderBrush="Black" BorderThickness="2" Background="#88FFFFFF" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="5">
            <StackPanel Orientation="Vertical" Margin="10">

                <Button Name="ChangeTextButton" Content="Change text" Margin="0 0 0 4" Padding="3 2" Click="ChangeTextButton_OnClick" />
                <Button Name="ChangeColorButton" Content="Change color" Margin="0 0 0 4" Padding="3 2" Click="ChangeColorButton_OnClick" />
                <Button Name="ChangePositionButton" Content="Change position" Margin="0 0 0 4" Padding="3 2" Click="ChangePositionButton_OnClick" />
                <Button Name="ChangeOrientationButton" Content="Change orientation" Margin="0 0 0 4" Padding="3 2" Click="ChangeOrientationButton_OnClick" />
                <Button Name="AlignWithCameraButton" Content="Align with Camera" Margin="0 0 0 4" Padding="3 2" Click="AlignWithCameraButton_OnClick" />
                <Button Name="ShowHideButton" Content="Hide" Margin="0 0 0 4" Padding="3 2" Click="ShowHideButton_OnClick" />
                <Button Name="AddTextButton" Content="Add" Margin="0 8 0 4" Padding="3 2" Click="AddTextButton_OnClick" />
                <Button Name="RemoveTextButton" Content="Remove" IsEnabled="False" Margin="0 0 0 4" Padding="3 2" Click="RemoveTextButton_OnClick" />
                <Button Name="ShowReportButton"  Content="Show report" Margin="0 8 0 0" Padding="3 2" VerticalAlignment="Center" Click="ShowReportButton_OnClick" />
            </StackPanel>
        </Border>

        <StackPanel Grid.Row="0" Orientation="Vertical" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="10">
            <TextBlock Text="InstancedTextNode - simple sample" FontWeight="Bold" FontSize="16" Foreground="#444" Focusable="False"/>
            <TextBlock Text="This sample shows how to change the text shown by InstancedTextNode" FontSize="14" TextWrapping="Wrap" Foreground="#333" Focusable="False"/>
        </StackPanel>

        <TextBox Name="InfoTextBox" Grid.Row="1" Height="150" Margin="0 10 0 0" Visibility="Collapsed" FontFamily="Consolas" FontSize="10" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" />
    </Grid>
</Page>
