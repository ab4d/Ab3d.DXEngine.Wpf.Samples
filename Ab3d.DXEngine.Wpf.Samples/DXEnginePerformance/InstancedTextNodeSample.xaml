<Page x:Class="Ab3d.DXEngine.Wpf.Samples.DXEnginePerformance.InstancedTextNodeSample"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:ab3d="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
      xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      xmlns:controls="clr-namespace:Ab3d.DXEngine.Wpf.Samples.Controls"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="1000"
      Title="MultiThreadingSample">

    <Grid Name="RootGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock Name="TitleTextBlock" Grid.Row="0" Text="InstancedTextNode sample" FontWeight="Bold" FontSize="16" Foreground="#444" Focusable="False"/>

        <Border Name="ViewportBorder" Grid.Row="1" Background="Transparent">

            <!-- This sample is using PresentationType set to DirectXOverlay. 
                 This can greatly improve performance of rendering instancing because graphic card can render in the background. 
                 With DirectXImage, the CPU needs to wait until graphics card finishes rendering and then can send the rendered image to the WPF composition engine. 
                 A drawback of DirectXOverlay is that no WPF object can be drawn over 3D scene. -->
            <dxControls:DXViewportView Name="MainDXViewportView" PresentationType="DirectXOverlay" BackgroundColor="White">
                <Viewport3D Name="MainViewport">
                </Viewport3D>
            </dxControls:DXViewportView>

        </Border>

        <cameras:TargetPositionCamera Name="Camera1" Grid.Row="1"
                                      TargetPosition="0 0 0"
                                      Heading="30" Attitude="-20" Bank="0"
                                      Distance="600" 
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=MainViewport}"/>

        <!-- EventsSourceElement is set to MainDXViewportView - this means that the MainDXViewportView's mouse events are subscribed to - this enables camera rotation without the need to be over the rendered 3D element -->
        <ab3d:MouseCameraController Name="MouseCameraController1" Grid.Row="1"
                                    ZoomMode="MousePosition"
                                    RotateAroundMousePosition="True"
                                    RotateCameraConditions="LeftMouseButtonPressed"
                                    MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                    EventsSourceElement="{Binding ElementName=MainDXViewportView}"
                                    TargetCamera="{Binding ElementName=Camera1}"/>

        <!--<ab3d:CameraAxisPanel Grid.Row="1" TargetCamera="{Binding ElementName=Camera1}" HorizontalAlignment="Left" VerticalAlignment="Bottom" />-->


        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Horizontal" Margin="0 8 0 0">
                <TextBlock Text="Scene type:" FontWeight="Bold" VerticalAlignment="Center" Margin="0 0 3 0"/>
                <ComboBox Name="SceneTypeComboBox" Width="150" SelectedIndex="0" SelectionChanged="SceneTypeComboBox_OnSelectionChanged">
                    <ComboBoxItem>Simple demo scene</ComboBoxItem>
                    <ComboBoxItem>8,000 coordinates</ComboBoxItem>
                    <ComboBoxItem>200,000 coordinates</ComboBoxItem>
                    <ComboBoxItem>1,000,000 coordinates</ComboBoxItem>
                </ComboBox>

                <TextBlock Name="CharactersCountTextBlock" Text="Chars count: 0" Margin="5 0 0 0" VerticalAlignment="Center" />

                <Button Name="ChangeColorButton" Content="Change color" Margin="15 0 0 0" Click="ChangeColorButton_OnClick" />
                <Button Name="ChangePositionButton" Content="Change position" Margin="8 0 0 0" Click="ChangePositionButton_OnClick" />
                <Button Name="ShowHideButton" Content="Hide" Margin="8 0 0 0" Click="ShowHideButton_OnClick" />
                <Button Name="AddTextButton" Content="Add" Margin="8 0 0 0" Click="AddTextButton_OnClick" />
                <Button Name="ShowReportButton" Content="Show report" Margin="15 0 0 0" Click="ShowReportButton_OnClick" />
            </StackPanel>

            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0 4 0 0">
                <TextBlock Text="AlphaClipThreshold: " VerticalAlignment="Center"/>
                <TextBlock Name="AlphaClipThresholdValueTextBlock" Text="0.15" VerticalAlignment="Center" />
                <Slider Name="AlphaClipThresholdSlider" Minimum="0" Maximum="1" Value="0.15" Width="100" Margin="3 0 5 0" VerticalAlignment="Center" ValueChanged="AlphaClipThresholdSlider_OnValueChanged"/>
                <controls:InfoControl x:Name="AlphaClipThresholdInfoControl" InfoWidth="400"/>
            </StackPanel>

            <Rectangle Grid.Column="0" Grid.ColumnSpan="2" Fill="Gray" Height="1" VerticalAlignment="Top" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" UseLayoutRounding="True" />
        </Grid>

        <TextBox Name="InfoTextBox" Grid.Row="3" Height="150" Margin="0 10 0 0" Visibility="Collapsed" FontFamily="Consolar" FontSize="10" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" />
    </Grid>
</Page>
