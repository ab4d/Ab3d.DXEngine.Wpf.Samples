<Page x:Class="Ab3d.DXEngine.Wpf.Samples.DXEnginePerformance.InstancedMeshGeometry3DTest"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"
      xmlns:ab3d="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
      xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"   
      xmlns:dxControls="clr-namespace:Ab3d.DirectX.Controls;assembly=Ab3d.DXEngine.Wpf"
      xmlns:controls="clr-namespace:Ab3d.DXEngine.Wpf.Samples.Controls"
      Title="InstancedMeshGeometry3DTest"
      mc:Ignorable="d" 
      d:DesignHeight="400" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" FontWeight="Bold" FontSize="18" Foreground="#333" Margin="5 0 5 4" TextWrapping="Wrap"
                   Text="Super fast rendering of many instances of the same 3D model (one MeshGeometry3D)"/>

        <Rectangle Grid.Row="0" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="2" Fill="#333333" SnapsToDevicePixels="True" />
        
        <!-- This sample is using PresentationType set to DirectXOverlay. 
             This can greatly improve performance of rendering instancing because graphic card can render in the background. 
             With DirectXImage, the CPU needs to wait until graphics card finishes rendering and then can send the rendered image to the WPF composition engine. 
             A drawback of DirectXOverlay is that no WPF object can be drawn over 3D scene. -->
        <dxControls:DXViewportView Name="MainDXViewportView" Grid.Row="1" PresentationType="DirectXOverlay" BackgroundColor="DeepSkyBlue">
            <Viewport3D Name="MainViewport">

                <visuals:BoxVisual3D CenterPosition="-10 -20 -10" Size="420 20 420" Material="Yellow"/>

                <!-- InstancedMeshGeometryVisual3D will be added from code -->
                <ModelVisual3D x:Name="ObjectsPlaceholder" >
                </ModelVisual3D>
                        
                <ModelVisual3D>
                    <ModelVisual3D.Content>
                        <Model3DGroup>
                            <AmbientLight Color="#333333"/>
                        </Model3DGroup>
                    </ModelVisual3D.Content>
                </ModelVisual3D>
            </Viewport3D>
        </dxControls:DXViewportView>

        <cameras:TargetPositionCamera Name="Camera1" Grid.Row="1"
                                      Heading="50.2" Attitude="-27" Bank="0" Distance="420" 
                                      TargetPosition="0 0 0"
                                      Offset="0 200 0"
                                      ShowCameraLight="Always"
                                      TargetViewport3D="{Binding ElementName=MainViewport}"/>

        <!-- EventsSourceElement is set to MainDXViewportView - this means that the MainDXViewportView's mouse events are subscribed to - this enables camera rotation without the need to be over the rendered 3D element -->
        <ab3d:MouseCameraController Name="MouseCameraController1" Grid.Row="1"
                                    ZoomMode="MousePosition"
                                    RotateAroundMousePosition="True"
                                    RotateCameraConditions="LeftMouseButtonPressed"
                                    MoveCameraConditions="LeftMouseButtonPressed, ControlKey"
                                    EventsSourceElement="{Binding ElementName=MainDXViewportView}"
                                    TargetCamera="{Binding ElementName=Camera1}"/>

        <Rectangle Grid.Row="2" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="2" Fill="#333333" SnapsToDevicePixels="True" />
        <WrapPanel Grid.Row="2" Margin="0 7 10 5" Orientation="Horizontal">
            <TextBlock Text="Mesh geometry:" FontWeight="Bold" VerticalAlignment="Center" Margin="0 0 3 5"/>
            <ComboBox Name="MeshTypeComboBox" SelectedIndex="2" Margin="0 0 15 5" SelectionChanged="OnSettingsChanged">
                <ComboBoxItem>Boxes (24 positions per object)</ComboBoxItem>
                <ComboBoxItem>Spheres (382 positions per object)</ComboBoxItem>
                <ComboBoxItem>Bunnies (11.553 positions per object)</ComboBoxItem>
            </ComboBox>

            <TextBlock Text="Instances count:" FontWeight="Bold" VerticalAlignment="Center" Margin="0 0 3 5"/>
            <ComboBox Name="InstancesCountComboBox" SelectedIndex="1" Margin="0 0 15 5" SelectionChanged="OnSettingsChanged">
                <ComboBoxItem>1600 (20 x 4 x 20)</ComboBoxItem>
                <ComboBoxItem>4000 (20 x 10 x 20)</ComboBoxItem>
                <ComboBoxItem>8000 (20 x 20 x 20)</ComboBoxItem>
                <ComboBoxItem>16000 (20 x 40 x 20)</ComboBoxItem>
                <ComboBoxItem>800.000 (20 x 2000 x 20)</ComboBoxItem>
            </ComboBox>

            <TextBlock Name="TotalTextBlock" Text="Total positions: 4000 * 24 = 12.345" Margin="0 0 15 5" FontWeight="Bold" VerticalAlignment="Center"/>

            <CheckBox Name="UseTransparencyCheckBox" Content="Use transparent objects" IsChecked="False" VerticalAlignment="Center" Margin="0 0 15 5"
                      Checked="UseTransparencyCheckBoxCheckedChanged" Unchecked="UseTransparencyCheckBoxCheckedChanged" />

            

            <Button Name="ShowHideInstancesButton" Content="Hide some instances" Margin="0 0 0 5" Click="ShowHideInstancesButton_OnClick" />

            <controls:InfoControl x:Name="ShowHideInstancesInfoControl" Margin="5 0 0 5" VerticalAlignment="Center"
                                  InfoText="Set instance alpha color to 0 to quickly discard some instances"/>
        </WrapPanel>
    </Grid>
</Page>
